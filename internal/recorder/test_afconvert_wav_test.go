// +build darwin

package recorder

import (
	"testing"
)

// TestReadAfconvertWAV tests reading a WAV file generated by afconvert (with FLLR chunk)
func TestReadAfconvertWAV(t *testing.T) {
	// This test uses the file created by manual testing: /tmp/test-system.wav
	data, err := ReadWAVFile("/tmp/test-system.wav")
	if err != nil {
		t.Logf("Note: This test requires /tmp/test-system.wav to exist")
		t.Logf("You can create it with: afconvert -f WAVE -d LEF32 input.caf /tmp/test-system.wav")
		t.Skip("Test file not available, skipping")
		return
	}

	// Verify format
	if data.SampleRate != 48000 {
		t.Errorf("Expected sample rate 48000, got %d", data.SampleRate)
	}

	if data.NumChannels != 2 {
		t.Errorf("Expected 2 channels, got %d", data.NumChannels)
	}

	if data.AudioFormat != 3 {
		t.Errorf("Expected audio format 3 (Float32), got %d", data.AudioFormat)
	}

	t.Logf("Successfully read afconvert-generated WAV file:")
	t.Logf("  Sample Rate: %d Hz", data.SampleRate)
	t.Logf("  Channels: %d", data.NumChannels)
	t.Logf("  Format: %d (3=Float32)", data.AudioFormat)
	t.Logf("  Samples: %d", len(data.Samples))
	t.Logf("  Duration: %.2f seconds", float64(len(data.Samples))/float64(data.NumChannels)/float64(data.SampleRate))
}
